/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SLP.jj */
/*@egen*//*
 * This is SLP.jj file.
 * It will build a tree for straightline programs that we can traverse using the Visitor pattern!
 */

options {
             
               
                         
  IGNORE_CASE=false;
}

PARSER_BEGIN(SLP)
public class SLP/*@bgen(jjtree)*/implements SLPTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSLPState jjtree = new JJTSLPState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    SLP t = new SLP(System.in);
    try {
      ASTStart n = t.Start();
      SLPVisitor v = new SLPDumpVisitor();
      n.jjtAccept(v, null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}
PARSER_END(SLP)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <PUBLIC:     "public">
|  <CLASS:      "class">
|  <STATIC:     "static">
|  <VOID:       "void">
|  <MAIN:       "main">
|  <STRING:     "String">
|  <EXTENDS:    "extends">
|  <RETURN:     "return">
|  <INT:        "int">
|  <BOOLEAN:    "boolean">
|  <TRUE:       "true">
|  <FALSE:      "false">
|  <IF:         "if">
|  <ELSE:       "else">
|  <WHILE:      "while">
|  <PRINTLN:    "System.out.println">
|  <LENGTH:     "length">
|  <THIS:       "this">
|  <NEW:        "new">
|  <BANG:       "!">
|  <COLON:      ":">
|  <SEMICOLON:  ";">
|  <COMMA:      ",">
|  <DOT:        ".">
|  <EQUALS:     "=">
|  <AND:        "&&">
|  <LT:         "<">
|  <GT:         ">">
|   <LPAREN:    "(" >
|   <RPAREN:    ")" >
|   <LBRACKET:    "[" >
|   <RBRACKET:    "]" >
|   <LCURLY:    "{" >
|   <RCURLY:    "}" >
|  <ADD_OP:    "+" | "-" >
|  <MULT_OP:   "*" | "/" >
|  <NUMBER:    (["0"-"9"])+ >
|  <ID:        (["a"-"z"]|"_"|["A"-"Z"])(["a"-"z"]|"_"|["A"-"Z"]|["0"-"9"])* >
}

/* Program Syntax */

ASTStart Start()       :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Statements()
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statements()             :
{/*@bgen(jjtree) Statements */
  ASTStatements jjtn000 = new ASTStatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
   try {
/*@egen*/
   Statement() Statements()
  |/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Statement() :
{}
{
  <PRINTLN> <LPAREN> Exp() <RPAREN>/*@bgen(jjtree) Println */
                                    {
                                      ASTPrintln jjtn001 = new ASTPrintln(JJTPRINTLN);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001, true);
                                      }
                                    }
/*@egen*/         
  |
  <ID> <EQUALS> Exp()/*@bgen(jjtree) VarAssign */
                      {
                        ASTVarAssign jjtn002 = new ASTVarAssign(JJTVARASSIGN);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
                      }
/*@egen*/           
}

void Exp()     :
{/*@bgen(jjtree) Exp */
  ASTExp jjtn000 = new ASTExp(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp */
  try {
/*@egen*/ 
  Exp4() Exp4a()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Exp4a():
{}
{
  <AND> Exp4() Exp4a()
  |
  {}
}

void Exp4()      :
{/*@bgen(jjtree) Exp4 */
  ASTExp4 jjtn000 = new ASTExp4(JJTEXP4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp4 */
  try {
/*@egen*/ 
  Exp9() Exp9a()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Exp9a():
{}
{
  <LT> Exp9() Exp9a()
  |
  {}
}


void Exp9()      :
{/*@bgen(jjtree) Exp9 */
  ASTExp9 jjtn000 = new ASTExp9(JJTEXP9);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp9 */
  try {
/*@egen*/ 
  Exp11() Exp11a()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Exp11a():
{}
{
  <ADD_OP> Exp11() Exp11a()
  |
  {}
}

void Exp11()       :
{/*@bgen(jjtree) Exp11 */
  ASTExp11 jjtn000 = new ASTExp11(JJTEXP11);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp11 */
  try {
/*@egen*/ 
  Exp12() Exp12a()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Exp12a():
{}
{
  <MULT_OP> Exp12() Exp12a()
  |
  {}
}

void Exp12() :
{}
{ 
  Exp16() 

}

void Exp16()       : 
{/*@bgen(jjtree) Exp16 */
  ASTExp16 jjtn000 = new ASTExp16(JJTEXP16);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exp16 */
  try {
/*@egen*//*@bgen(jjtree) Number */
  {
    ASTNumber jjtn001 = new ASTNumber(JJTNUMBER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <NUMBER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
  |/*@bgen(jjtree) Variable */
  {
    ASTVariable jjtn002 = new ASTVariable(JJTVARIABLE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  <ID>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/            
  |
  <LPAREN> Exp() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}