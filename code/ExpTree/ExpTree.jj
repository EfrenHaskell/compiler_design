/*
 * This is ExpTree.jj file.
 * It will build a tree we can traverse using the Visitor pattern!
 */


options {

  IGNORE_CASE=false;
}

PARSER_BEGIN(ExpTree)
import syntaxtree.*;

public class ExpTree {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    ExpTree t = new ExpTree(System.in);
    try {
      Exp e = t.Start();
      System.out.println(e);
      Visitor v = new DumpVisitor();
      e.accept(v,null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}
PARSER_END(ExpTree)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
  
  <LPAREN:    "(" >
|  <RPAREN:    ")" >
|  <PLUS:    "+" >
|  <MINUS:    "-" >
|  <MULT_OP:   "*" >
|  <NUMBER:    (["0"-"9"])+ >
}

/* Program Syntax */

Exp Start():
{Exp e;}
{
  e=Exp()
  <EOF>
  {return(e);}

}

Exp Exp():
{Exp a,b;}
{ 
  a=Exp11() 
    (
    <PLUS> b=Exp11(){a = new Plus(a,b);}
    |
    <MINUS> b = Exp11() {a = new Minus(a,b);}
    )* 

  {return(a);}
}

Exp Exp11():
{Exp a,b;}
{ 
  a=Exp12() 
  (LOOKAHEAD(2) <MULT_OP> b=Exp12() {a = new Times(a,b);})* 
  {return(a);}
}

Exp Exp12():
{Exp a,b; 
 ExpList c;
 Token t;}
{ 
  a=Exp14() 
  {return(a);}
}

Exp Exp14():
{Exp a,b;}
{
  a=Exp16() 
  {return(a);}
}


Exp Exp16() :
{Exp a;
 Token t;
 }
{
  t=<NUMBER> {return new IntegerLiteral(Integer.parseInt(t.image));}
  |
  <LPAREN> a=Exp() <RPAREN>
  {return(a);}
}






