/*
 * This is ExpTree.jj file.
 * It will build a tree we can traverse using the Visitor pattern!
 */


options {

  IGNORE_CASE=false;
}

PARSER_BEGIN(ExpTree)
import syntaxtree.*;

public class ExpTree {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    ExpTree t = new ExpTree(System.in);
    try {
      Exp e = t.Start();
      System.out.println(e);
      Visitor v = new DumpVisitor();
      e.accept(v,null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}
PARSER_END(ExpTree)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <PUBLIC:     "public">
|  <CLASS:      "class">
|  <STATIC:     "static">
|  <VOID:       "void">
|  <MAIN:       "main">
|  <STRING:     "String">
|  <EXTENDS:    "extends">
|  <RETURN:     "return">
|  <INT:        "int">
|  <BOOLEAN:    "boolean">
|  <TRUE:       "true">
|  <FALSE:      "false">
|  <IF:         "if">
|  <ELSE:       "else">
|  <WHILE:      "while">
|  <PRINTLN:    "System.out.println">
|  <LENGTH:     "length">
|  <THIS:       "this">
|  <NEW:        "new">
|  <BANG:       "!">
|  <COLON:      ":">
|  <SEMICOLON:  ";">
|  <COMMA:      ",">
|  <DOT:        ".">
|  <EQUALS:     "=">
|  <AND:        "&&">
|  <LT:         "<">
|  <GT:         ">">
|   <LPAREN:    "(" >
|   <RPAREN:    ")" >
|   <LBRACKET:    "[" >
|   <RBRACKET:    "]" >
|   <LCURLY:    "{" >
|   <RCURLY:    "}" >
|  <ADD_OP:    "+" | "-" >
|  <MULT_OP:   "*" | "/" >
|  <NUMBER:    (["0"-"9"])+ >
|  <ID:        (["a"-"z"]|"_"|["A"-"Z"])(["a"-"z"]|"_"|["A"-"Z"]|["0"-"9"])* >
}

/* Program Syntax */

Exp Start():
{Exp e;}
{
  e=Exp()
  <EOF>
  {return(e);}

}

Exp Exp():
{Exp a,b;}
{ 
  a=Exp4() (LOOKAHEAD(2) <AND> b=Exp4() 
            {a = new And(a,b);}
           )* 

  {return(a);}
  

}

Exp Exp4():
{Exp a,b;}
{ 
  a=Exp9() 
  (LOOKAHEAD(2) <LT> b=Exp9() {a = new LessThan(a,b);})* 
  {return(a);}

}


Exp Exp9():
{Exp a,b;}
{ 
  a=Exp11() 
    (LOOKAHEAD(2) <ADD_OP> b=Exp11(){a = new Plus(a,b);})* 
  {return(a);}
}

Exp Exp11():
{Exp a,b;}
{ 
  a=Exp12() 
  (LOOKAHEAD(2) <MULT_OP> b=Exp12() {a = new Times(a,b);})* 
  {return(a);}
}

Exp Exp12():
{Exp a,b; 
 ExpList c;
 Token t;}
{ 
  a=Exp14() 
  ( 
    LOOKAHEAD(2)
    <DOT> <LENGTH> 
        {return new ArrayLength(a);}
    |
    <DOT> t=<ID> <LPAREN> c=ExpList() <RPAREN> 
    {a =  new Call(a,new Identifier(t.image),c);}
    |
    <LBRACKET> b=Exp()<RBRACKET> 
    {return new ArrayLookup(a,b);}


  )* 
  {return(a);}
}

Exp Exp14():
{Exp a,b;}
{
  <BANG> a=Exp16() 
       {return(new Not(a));}
  |
  a=Exp16() 
  {return(a);}
}


Exp Exp16() :
{Exp a;
 Token t;
 }
{
  t=<NUMBER> {return new IntegerLiteral(Integer.parseInt(t.image));}
  |
  <TRUE> {return new True();}
  |
  <FALSE>  {return new False();}
  |
  <THIS>  {return new This();}
  |
  t=<ID>  {return new IdentifierExp(t.image);}
  |
  LOOKAHEAD(2)
  <NEW> <INT> <LBRACKET> a=Exp() <RBRACKET>
  {return new NewArray(a);}
  |
  <NEW> t=<ID> <LPAREN> <RPAREN> 
  {return new NewObject(new Identifier(t.image));}
  |
  <LPAREN> a=Exp() <RPAREN>
  {return(a);}
}



ExpList ExpList() :
{ExpList a;
 Exp b;}
{
  b=Exp() {a = new ExpList(null,b);}
  (<COMMA> b=Exp() {a=new ExpList(a,b);})*
  {return a;}
}




