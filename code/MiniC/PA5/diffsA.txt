diff --git a/code/MiniC/PA5/CodeGen_Visitor.java b/code/MiniC/PA5/CodeGen_Visitor.java
index 5e0b7d0..8f072a8 100644
--- a/code/MiniC/PA5/CodeGen_Visitor.java
+++ b/code/MiniC/PA5/CodeGen_Visitor.java
@@ -26,7 +26,8 @@ import org.omg.CORBA.SystemException;
  * 2. currMethod - the current method
  * 3. labelNum - the current label number, for use in loops and conditionals
  * 4. stackOffset - the current stack offset, to keep track of temporaries
- * 5. formalOffset - the current formal offset, to keep track of parameters
+ * 5. numFormals - the current number of formal parameters processed
+ * 6. formalOffset - the current formal offset, to keep track of parameters
  * 
  * Once we get this naive method working we can look into building an optimizing compiler.
  */
@@ -41,9 +42,12 @@ public class CodeGen_Visitor implements Visitor {
     private String currClass = "";
     private String currMethod = "";
     private int labelNum = 0;
-    private int stackOffset = 0;
+    private int stackOffset = -24;
     private int formalOffset = 0;
+    private int numFormals = 0;
     private Visitor ppVisitor = new PP_Visitor();
+    private String[] regFormals= //registers for first six formals...
+        {"%rdi","%rsi","%rdx","%rcx","%r8","%r9"}; 
 
 
     public Object visit(And node, Object data){ 
@@ -193,12 +197,36 @@ public class CodeGen_Visitor implements Visitor {
 
     public Object visit(Formal node, Object data){ 
         // find location of formal in stack
+        /*
+         * The first six parameters are passed in registers
+         * rdi,rsi, rdx,rcx, r7, r8
+         * the rest are passed on the stack above rbp 
+         * 16(%rbp), 24(%rbp), ..
+         * This compiler will copy the parameters in register
+         * into the stack frame, so they will be treated
+         * as locals!
+         */
         Identifier i=node.i;
         Type t=node.t;
 
-        formalOffset += 8;
+
         String varName = currClass+"_"+currMethod+"_"+i.s;
-        String location = formalOffset + "(%rbp)";
+        String location = "";
+        if (numFormals < 6){
+            stackOffset -= 8;
+            location = (stackOffset) + "(%rbp)";
+            /*
+             * up to the first six formals are passed in registers
+             * and we will the copy them to the stack frame as locals
+             */
+        } else {
+            location = (2+numFormals-6)*8 + "(%rbp)";
+            /*
+             * formals from 7 on are store in offsets 16,24,32, ... above rbp
+             */
+        }
+        numFormals += 1;
+        
         varMap.put(varName, location);
 
         //node.i.accept(this, data);
@@ -254,15 +282,31 @@ public class CodeGen_Visitor implements Visitor {
     }
 
     public Object visit(If node, Object data){ 
-        // not implemented yet
+        // evaluate e, jmp to s1 if true, s2 if false, 
+        // jump to end after either case
         Exp e=node.e;
         Statement s1=node.s1;
         Statement s2=node.s2;
-        node.e.accept(this, data);
-        node.s1.accept(this, data);
-        node.s2.accept(this, data);
+        String eCode = (String) node.e.accept(this, data);
+        String thenCode= (String) node.s1.accept(this, data);
+        String elseCode = (String) node.s2.accept(this, data);
+        String label1 = "L"+labelNum;
+        labelNum += 1;
+        String label2 = "L"+labelNum;
+        labelNum += 1;
 
-        return "# If not implemented yet\n"; 
+        return 
+         "# conditional statement\n" 
+         + eCode 
+         + "popq %rax\n"
+         + "cmpq	$1, %rax\n"
+         + "jne "+label1+"\n"
+         + thenCode
+         + "jmp "+label2+"\n"
+         + label1+":\n"
+         + elseCode
+         + label2+":\n";
+        
     }
 
     public Object visit(IntArrayType node, Object data){ 
@@ -287,13 +331,37 @@ public class CodeGen_Visitor implements Visitor {
     }
 
     public Object visit(LessThan node, Object data){ 
-        // not implemented yet
+        /* We implement this in an inefficient but simple way.
+         * where we evaluate the two expressions in A<B
+         * and push them into the stack as values "a" and "b"
+         * then we do a comparison of "a" and "b"
+         * and if "a"<"b" we push 1 onto the stack, else we push 0
+         * So the result of LessThan is either 1 (if true) or 0 (if false)
+         * This is what C does, it treats 0 as False and nonzero as True
+         */
         Exp e1=node.e1;
         Exp e2=node.e2;
-        node.e1.accept(this, data);
-        node.e2.accept(this, data);
+        String e1Code = (String) node.e1.accept(this, data);
+        String e2Code = (String) node.e2.accept(this, data);
+        String label1 = "L"+labelNum;
+        labelNum += 1;
+        String label2 = "L"+labelNum;
+        labelNum += 1;
 
-        return "# not implemented yet\n";
+        return 
+         "# "+node.accept(ppVisitor, data)+"\n"
+         + e1Code
+         + e2Code
+         + "# compare rdx<rax and push 1 on stack if true, 0 else\n"
+         + "popq %rdx\n"      // pop 2nd expr value B into rdx
+         + "popq %rax\n"      // pop 1st expr value A into rax
+         + "cmpq %rdx, %rax\n"// compare the two values
+         + "jge "+label1+"\n" // if  A >= B jump to label1
+         + "pushq $1\n"       // otherwise A < B, so push 1 on stack
+         + "jmp "+label2+"\n" // and jump to the end of this code
+         + label1+":\n"       // in this case, A >= B, so
+         + "pushq $0\n"       // push 0 on stack
+         + label2+":\n" ;      // both branches end up here
     }
 
     public Object visit(MainClass node, Object data){ 
@@ -328,12 +396,16 @@ public class CodeGen_Visitor implements Visitor {
 
 
 
-        formalOffset = 8;
+
+
+        numFormals = 0;
         String theLabel = i.s ; //labelMap.get(currClass) + i.s;
         labelMap.put(currClass + i.s, theLabel);
 
+
+
         currMethod = i.s;  // set "global variable"
-        stackOffset = 0;
+        stackOffset = -24; // skip 1st three slots in the frame 0, -8, -16
 
         
 
@@ -345,6 +417,11 @@ public class CodeGen_Visitor implements Visitor {
             formals += (String) node.f.accept(this, data);
         }
 
+        String copyFormals = "# copy formals in registers to stack frame\n";
+        for (int j=0; j<numFormals; j++){
+            copyFormals += "movq "+regFormals[j]+", -"+(32+8*j)+"(%rbp)\n";
+        }
+
         
 
         // assign locations for local variables
@@ -358,24 +435,26 @@ public class CodeGen_Visitor implements Visitor {
 
         expressionCode = (String) node.e.accept(this, data);
 
-        int stackChange = - stackOffset;
+        int stackChange = (- stackOffset);
 
         prologue = 
         
         ".globl "+"_"+theLabel+"\n"
         +"_"+theLabel+":\n"
-        +formals
+        
         + "# prologue\n"
         + "pushq %rbp\n"
         + "movq %rsp, %rbp\n"
+        + formals
+        + copyFormals
         + locals
         + "#make space for locals on stack\n"
-        + "subq $"+stackChange+", %rsp\n";
+        + "subq $"+(stackChange)+", %rsp\n";
 
         epilogue =
         "# epilogue\n"
         +   "popq %rax\n"
-        +   "addq $"+stackChange+", %rsp\n"
+        +   "addq $"+(stackChange)+", %rsp\n"
         +   "movq %rbp, %rsp\n"
         +   "popq %rbp\n"
         // maybe insert code her to print out the return value
@@ -481,6 +560,7 @@ public class CodeGen_Visitor implements Visitor {
             expCode
         + "# "+node.accept(ppVisitor, 0)
         +   "popq %rdi\n"
+        +   "movb	$0, %al\n"  
         +   "callq _print\n";
 
         return result;
