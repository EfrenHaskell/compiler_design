/*
 * This is MiniC_v1.jj file.
 * This currently parses MiniC programs (defined below)
 * your goal is to extend this so that it parses MiniJava programs
 * you will have to add javacc rules for 8 grammar rules in MiniJava
 * that aren't in MiniC
 */

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(MiniC_v1)
import syntaxtree.*;

public class MiniC_v1 {

  /** Main entry point. */
  public static void main(String args[]) {
    MiniC_v1 t = new MiniC_v1(System.in);
    try {
      t.Start();
      System.out.println("\n\nDone!");

    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }


}

PARSER_END(MiniC_v1)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <PUBLIC:     "public">
|  <PREFACE:    "#include <stdio.h>\n#include <stdbool.h>\nvoid print(int n){printf(\"%10d\\n\",n);}">
|  <CLASS:      "class">
|  <STATIC:     "static">
|  <VOID:       "void">
|  <STRING:     "String">
|  <EXTENDS:    "extends">
|  <RETURN:     "return">
|  <INT:        "int">
|  <BOOLEAN:    "bool">
|  <TRUE:       "true">
|  <FALSE:      "false">
|  <IF:         "if">
|  <ELSE:       "else">
|  <WHILE:      "while">
|  <PRINTLN:    "print">
|  <LENGTH:     "length">
|  <THIS:       "this">
|  <NEW:        "new">
|  <BANG:       "!">
|  <COLON:      ":">
|  <SEMICOLON:  ";">
|  <COMMA:      ",">
|  <DOT:        ".">
|  <EQUALS:     "=">
|  <AND:        "&&">
|  <LT:         "<">
|  <GT:         ">">
|   <LPAREN:    "(" >
|   <RPAREN:    ")" >
|   <LBRACKET:    "[" >
|   <RBRACKET:    "]" >
|   <LCURLY:    "{" >
|   <RCURLY:    "}" >
|  <PLUS_OP:    "+" >
|  <MINUS_OP:   "-" >
|  <TIMES_OP:    "*" >
|  <NUMBER:    (["0"-"9"])+ >
|  <ID:        (["a"-"z"]|"_"|["A"-"Z"])(["a"-"z"]|"_"|["A"-"Z"]|["0"-"9"])* >
}

/* Program Syntax */

void Start():
{}
{
  <PREFACE>
   MethodDeclList()
  <EOF>

}


void VarDecls() : 
{}
{ 
    (  LOOKAHEAD(2)  
       VarDecl() 
    )*
}


void VarDecl() :
{}
{ 
  Type() <ID> <SEMICOLON>
}

void Type():
{}
{ LOOKAHEAD(2)
  
  <BOOLEAN> 
  |
  <INT> 
  
}


void MethodDeclList() : 
{}
{ 
    (  MethodDecl() )*
}



void MethodDecl()  :
{}
{
  Type() <ID> <LPAREN> FormalList() <RPAREN>
      <LCURLY>
           VarDecls() 
           Statements()
           <RETURN> Exp() <SEMICOLON>
      <RCURLY>
}


void FormalList() : 
{}
{ 
   Formal() 
  ( 
    <COMMA> Formal() 
  )*
}

void Formal() :
{}
{
  Type() <ID> 
}


void Statements() :
{}
{
   (Statement() ) * 
}

void Statement() :
{}
{
  <LCURLY> Statements() <RCURLY> 

  |
  <IF> <LPAREN> Exp()<RPAREN> Statement() <ELSE> Statement()

  |
  <PRINTLN> <LPAREN> Exp() <RPAREN> <SEMICOLON> 

  |
  LOOKAHEAD(2) <ID> <EQUALS> Exp() <SEMICOLON> 

}


void Exp():
{}
{ 
  Exp9() 
  (LOOKAHEAD(2) <LT> Exp9())* 
}


void Exp9():
{}
{ 
  Exp11() 
    (LOOKAHEAD(2) 
      (
        "+" Exp11() 
       |
        "-" Exp11() 
      )
    )* 

}

void Exp11():
{}
{ 
  Exp12() 
  ( 
    LOOKAHEAD(2) 
    "*" Exp12() 
   )* 

}

void Exp12():
{}
{ 
  Exp14() 
}

void Exp14():
{}
{
  Exp16() 
}


void Exp16() :
{}
{ 
  <NUMBER> 
  |
  <TRUE> 
  |
  <FALSE> 
  |
    <LPAREN> Exp() <RPAREN>

  |
  LOOKAHEAD(3)
  <ID> <LPAREN> ExpList() <RPAREN> 
 
  |
  <ID> 

}



void ExpList() :
{}
{
  Exp() 
  (<COMMA> Exp() )*
}


