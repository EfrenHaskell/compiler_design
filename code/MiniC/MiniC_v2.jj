/*
 * This is MiniC_v2.jj file.
 * This currently parses and prtty prints MiniC programs
 * your goal is to extend this so that it parses MiniJava programs
 * you will have to add javacc rules for 8 grammar rules in MiniJava
 * that aren't in MiniC
 */

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(MiniC_v2)
import syntaxtree.*;

public class MiniC_v2 {

  /** Main entry point. */
  public static void main(String args[]) {
    MiniC_v2 t = new MiniC_v2(System.in);
    try {
      t.Start(1); // pretty print the program, passing in indent level of 1

    } catch (Exception e) { // handle any errors that arise, e.g. parsing or tokenizing errors
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

 
    static void indent(int indent_count){
        System.out.print(String.format("\n%1$"+4*indent_count+"s", ""));
    }   

    static void print(String s){
        System.out.print(s);
    }

    static void space(){
        System.out.print(" ");
    }

}

PARSER_END(MiniC_v2)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <PUBLIC:     "public">
|  <PREFACE:    "#include <stdio.h>\n#include <stdbool.h>\nvoid print(int n){printf(\"%10d\\n\",n);}">
|  <CLASS:      "class">
|  <STATIC:     "static">
|  <VOID:       "void">
|  <STRING:     "String">
|  <EXTENDS:    "extends">
|  <RETURN:     "return">
|  <INT:        "int">
|  <BOOLEAN:    "bool">
|  <TRUE:       "true">
|  <FALSE:      "false">
|  <IF:         "if">
|  <ELSE:       "else">
|  <WHILE:      "while">
|  <PRINTLN:    "print">
|  <LENGTH:     "length">
|  <THIS:       "this">
|  <NEW:        "new">
|  <BANG:       "!">
|  <COLON:      ":">
|  <SEMICOLON:  ";">
|  <COMMA:      ",">
|  <DOT:        ".">
|  <EQUALS:     "=">
|  <AND:        "&&">
|  <LT:         "<">
|  <GT:         ">">
|   <LPAREN:    "(" >
|   <RPAREN:    ")" >
|   <LBRACKET:    "[" >
|   <RBRACKET:    "]" >
|   <LCURLY:    "{" >
|   <RCURLY:    "}" >
|  <PLUS_OP:    "+" >
|  <MINUS_OP:   "-" >
|  <TIMES_OP:    "*" >
|  <NUMBER:    (["0"-"9"])+ >
|  <ID:        (["a"-"z"]|"_"|["A"-"Z"])(["a"-"z"]|"_"|["A"-"Z"]|["0"-"9"])* >
}

/* Program Syntax */

void Start(int n):
{Token t;}
{
  t= <PREFACE>  {print(t.image); print("\n");}
   MethodDeclList(n)
  <EOF>

}


void VarDecls(int n) : 
{}
{ 
    (  LOOKAHEAD(2)  
       VarDecl(n) 
    )*
}



void VarDecl(int n) :
{}
{   
    {indent(n);} Type(n) 
    {space();} Identifier(n) 
    <SEMICOLON> {print(";");}
}

void Type(int n):
{Token t;}
{ LOOKAHEAD(2)
  
  t=<BOOLEAN> {print(t.image);}
  |
  t=<INT> {print("int");}
  
}


void MethodDeclList(int n) : 
{}
{ 
    (  MethodDecl(n) )*
}



void MethodDecl(int n)  :
{}
{
  {indent(n);} Type(n) 
  {space();} Identifier(n) 
            <LPAREN>  {print("(");}
            FormalList(n) 
            <RPAREN>  {print(")");}
      <LCURLY> {indent(n); print("{");}
           VarDecls(n+1) 
           Statements(n+1)
           <RETURN> {indent(n+1); print("return ");}
           Exp(n) 
           <SEMICOLON> {print(";");}
      <RCURLY> {indent(n); print("}"); }
}


void FormalList(int n) : 
{}
{ 
   Formal(n) 
  ( 
    <COMMA> Formal(n) 
  )*
}

void Formal(int n) :
{}
{
  Type(n) {space();} Identifier(n) 
}


void Statements(int n) :
{}
{
   (Statement(n) ) * 
}

void Statement(int n) :
{}
{
  <LCURLY> {indent(n); print("{");}
     Statements(n+1) 
  <RCURLY> {indent(n); print("}");}

  |
    {indent(n);} <IF> <LPAREN> {print("if (");} 
                    Exp(n+1)
                <RPAREN> {print(")");}
                Statement(n+1) 
                {indent(n);} <ELSE> {print("else");} 
                Statement(n+1)

  |
  {indent(n);} <PRINTLN> 
            <LPAREN> {print("print(");} 
            Exp(n+1) 
            <RPAREN> <SEMICOLON> {print(");");}

  |
  LOOKAHEAD(2) 
  {indent(n);} Identifier(n) <EQUALS> {print("=");} Exp(n) <SEMICOLON> {print(";");}

}


void Exp(int n):
{}
{ 
  Exp9(n) 
  (
    LOOKAHEAD(2) 
    <LT> {print("<");}
    Exp9(n)
  )* 
}


void Exp9(int n):
{}
{ 
  Exp11(n) 
    (LOOKAHEAD(2) 
      (
        "+" {print("+");} Exp11(n) 
       |
        "-" {print("-");} Exp11(n) 
      )
    )* 

}

void Exp11(int n):
{}
{ 
  Exp12(n) 
  ( 
    LOOKAHEAD(2) 
    "*" {print("*");} Exp12(n) 
   )* 

}

void Exp12(int n):
{}
{ 
  Exp14(n) 
}

void Exp14(int n):
{}
{
  Exp16(n) 
}


void Exp16(int n) :
{Token t;}
{ 
  t=<NUMBER> {print(t.image);}
  |
  t=<TRUE>  {print(t.image);}
  |
  t=<FALSE> {print(t.image);}
  |
    <LPAREN> {print("(");} 
    Exp(n+1) 
    <RPAREN> {print(")");}

  |
  LOOKAHEAD(3)
  Identifier(n) 
  <LPAREN> {print("(");}
  ExpList(n+1) 
  <RPAREN> {print(")");}
 
  |
  Identifier(n) 

}

void Identifier(int n):
{Token t;}
{
    t=<ID> {print(t.image);}
}


void ExpList(int n) :
{}
{
  Exp(n) 
  (
    <COMMA> {print(",");}
    Exp(n)
  )*
}


